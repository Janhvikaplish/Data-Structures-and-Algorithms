class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int graph[][]= new int[V][V];
        int i=0;
        for(ArrayList<ArrayList<Integer>> a : adj)
        {
            for(ArrayList<Integer> y : a)
            {
                graph[i][y.get(0)]=y.get(1);
            }
            i++;
        }
        boolean vis[] = new boolean[V];
        // vis[S]=true;
        int dis[] = new int[V];
        Arrays.fill(dis,Integer.MAX_VALUE);
        dis[S]=0;
        for(int j=0;j<V-1;j++)
        {
             int u=-1;
             for(int k=0;k<V;k++ )
             {
                 if(!vis[k] && (u==-1 || dis[k]<dis[u]))
                 u=k;
             }
              vis[u]=true;
              for(int k=0;k<V;k++)
              {
                  if(!vis[k] && graph[u][k]!=0)
                  dis[k]=Math.min(dis[u]+graph[u][k],dis[k]);
              }
         }
         return dis;
        
        // int ad[][]=new int[V][V];
        // int i=0;
        // for(ArrayList<ArrayList<Integer>>x:adj)
        // {
        //     for(ArrayList<Integer>y:x)
        //         ad[i][y.get(0)]=y.get(1);
        //     i++;
        // }
        // boolean visited[]=new boolean[V];
        // int dist[]=new int[V];
        // Arrays.fill(dist,Integer.MAX_VALUE);
        // dist[S]=0;
        // for(int count=0;count<V-1;count++)
        // {
        //     int u=-1;
        //     for(i=0;i<V;i++)
        //         if(!visited[i] && (u==-1 || dist[i]<dist[u]))
        //             u=i;
        //     visited[u]=true;
        //     for(int v=0;v<V;v++)
        //         if(!visited[v] && ad[u][v]!=0)
        //             dist[v]=Math.min(dist[v],dist[u]+ad[u][v]);
        // }
        // return dist;
        
    }
}

