class Solution
{
    int m, n;
    public int numIslands(char[][] grid)
    {
        m = grid.length;
        n = grid[0].length;
        boolean visited[][] = new boolean[m][n];
        int count = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if( !visited[i][j] && grid[i][j] == '1'){
                    count++;
                    DFS(grid, i, j, visited);
                }
            }
        }
        
        return count; 
    }
    
    
    
    public void DFS(char[][] grid, int i, int j, boolean visited[][] ){
        
        if(i<0||j<0||i>=m||j>=n||grid[i][j]=='0'||visited[i][j]==true)
        return;
        
        visited[i][j] = true;
        
        DFS(grid,i-1,j,visited);
        DFS(grid,i+1,j,visited);
        DFS(grid,i,j+1,visited);
        DFS(grid,i,j-1,visited);
        DFS(grid,i-1,j-1,visited);
        DFS(grid,i-1,j+1,visited);
        DFS(grid,i+1,j-1,visited);
        DFS(grid,i+1,j+1,visited);
        
    }
}
